Los hooks son funciones que simplifican los mecanismos para trabajar con componentes funcionales

useState()
      Sintaxis:
            const [ state, setState ]= useState( initialState )
            Devuelve un valor como estado y una funcion para actualizar ese estado
            Durante el renderizado inicial, el estado devuelto ( state ) es el mismo que el valor pasado como primer argumento ( initialState ).
      Es importante no olvidar de importar el hook   /// import React, { useState } from "react" ///

      Ejemplo:
            function Counter({initialCount}) {
                  const [count, setCount] = useState(initialCount);
                  return (
                        <>
                          Count: {count}
                          <button onClick={() => setCount(initialCount)}>Reset</button>
                          <button onClick={() => setCount(count => count - 1)}>-</button>
                          <button onClick={() => setCount(count => count + 1)}>+</button>
                        </>
                  );
            }
/////////////////////////////////////////////////////


useRef()
      Sintaxis:
            const refContainer = useRef(initialValue);
            useRef() devuelve un objeto ref mutable cuya propiedad .current se inicializa con el argumento pasado (initialValue). El objeto devuelto se mantendrá persistente durante la vida completa del componente.
            En esencia, useRef es como una “caja” que puedes mantener en una variable mutable en su propiedad .current.

      Ejemplo:
            function TextInputWithFocusButton() {
                  const inputEl = useRef(null);  (( La constante inputEl almacena una referencia al DOM que no tiene valor inicial. ))
                  const onButtonClick = () => {
                        // `current` apunta al elemento de entrada de texto montado
                        inputEl.current.focus();
                  };
                  return (
                    <>
                      <input ref={inputEl} type="text" />  (( Para poder enlazar nuestra referencia, por ejemplo, a un input, se usa la propiedad ref ))
                      <button onClick={onButtonClick}>Focus the input</button>
                    </>
                   );
            }
            En sintesis, este hook sirve para anexarlo a un elemento del Dom y acceder a todas sus propiedades, como style, value, etc

/////////////////////////////////////////////////////

useEffect()
      Sintaxis:
            useEffect( (  ) => {
                  Cuerpo de la funcion que recibe 
             }, [ Lista de parametros que depende el efecto ])   
                  (( El segundo parametro recibe un array de elementos los cuales queramos que al modificarse se renderice el useEffect, tambien puede recibir un array vacio, para indicar que solo se active cuando el componente se monta ))
            Como su nombre indica, este hook sirve para definir efectos
            Sirve para darle una funcion que se ejecute en algun punto del ciclo de vida del componente
            El hook useEffect en React equivale a una combinación de las funciones componentDidMount, componentDidUpdate y componentWillUnmount.
            Con el hook useEffect podremos ejecutar código cada vez que nuestro componente se renderice (ya sea por una actualización o sea la primera vez).

      Ejemplo:
            function Example() {
                  const [count, setCount] = useState(0);

                  useEffect(() => {
                    document.title = `You clicked ${count} times`; ((CADA VEZ QUE COUNT SE ACTUALIZA useEffect ACTUALIZA EL TITULO DE LA PAGINA))
                  });

                    return (
                        <div>
                              <p>You clicked {count} times</p>
                              <button onClick={() => setCount(count + 1)}>
                              Click me
                              </button>
                        </div>
                  );
            }

/////////////////////////////////////////////////////////

useContext()
      Sintaxis:
            Sirve como un atajo para pasar informacion entre elementos padre e hijo
            El contexto crea un componente provider que almacena el dato y un componente consumer que accede a este dato desde el componente final. Este consumer puede ser tratado de dos maneras: con el contextconsumer en React o con el useContext en React.

            Hay que crear un contexto con anterioridad
            const MyContext = React.createContext ( );

            import {createContext} from ‘react’;
            const AuthContext = createContext ( )

            <AuthContextProvider value = {{ isLogged, handleLogin, handleLogout}}>
            
            Supongamos que este componente es un botón que necesita el estado isLogged y la función handleLogout para funcionar, que se encuentran dentro del provider. Entonces, podemos insertar la siguiente línea de código directamente dentro del componente botón
            const value = useContext (AuthContext)
